The TCPR home page, <http://www.cs.cornell.edu/~burgess/tcpr/>, provides
information about the people involved in the project, the code development
repository, and TCPR's design and ongoing research.  This document aims
to guide someone new to the project from first cloning the code repository
through conducting a live demonstration and developing new applications.

TCPR uses the GNU autotools build system.  However, the repository does
not contain any generated files, so once, right after cloning, you must
set up some infrastructure:

  $ autoreconf -i

Then, you can build the userspace programs and iptables extension library.

  $ mkdir tcpr-build
  $ cd tcpr-build
  $ ../tcpr/configure
  $ make
  # make install

The kernel module must be built separately, using the kernel build system.

  $ cd module
  $ make
  # make install

Once the module is installed, load it into the kernel.

  # modprobe tcpr

Set up firewall rules to match traffic and updates.  For example, assume
the application is bound to 10.0.0.1 and its traffic flows through the
filter (perhaps it is in a virtual machine with bridged networking).

  # iptables -t mangle -A FORWARD -d 10.0.0.1/32 -p tcp -j TCPR --peer
  # iptables -t mangle -A FORWARD -s 10.0.0.1/32 -p tcp -j TCPR 
  # iptables -t mangle -A FORWARD -s 10.0.0.1/32 -p udp -j TCPR 

The `tcpr-chat' program can run as an application or its peer, with either
endpoint initiating the connection.  Both endpoints pipe their standard
input and output through the network connection.

Run the application as a server.  For the TCPR address, anything that
matches the UDP firewall rule above is acceptable.

  $ tcpr-chat -b 9999 -t 10.0.0.2:7777

On another machine (or virtual machine), run the peer as a client.

  $ tcpr-chat -b 10.0.0.2:8888 -c 10.0.0.1:9999

Now chat back and forth between the two endpoints.  You can kill the
fault-tolerant application with control-C.  You can then recover by
running the application again as a client.

  $ tcpr-chat -b 10.0.0.1:9999 -c 10.0.0.2:8888 -t 10.0.0.2:7777

You can also use `tcpr-control' to inspect the state held by the filter
for a particular connection.

  $ tcpr-control -b 10.0.0.1:9999 -c 10.0.0.2:8888 -t 10.0.0.2:7777

The source code for `tcpr-chat', in `src/chat.c', provides an example
of the UDP protocol used to write a TCPR-aware application.
